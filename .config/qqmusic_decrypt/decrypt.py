#!/usr/bin/env python3


"""
Example:

python3 ./decrypt.py \
	--source_root=./qqmusic/ \
	--target_root=./qqmusic_decrypted/ \
	--workers=8
"""


import argparse
import os
import shutil
from multiprocessing import Pool
from pathlib import Path

# The algorithm is from https://github.com/42arch/qmc_file_decrypter
SUFFIX_MAP = {
    "qmcogg": "ogg",
    "qmcflac": "flac",
    "qmc0": "mp3",
}


# fmt: off
MAPS = (0x77, 0x48, 0x32, 0x73, 0xDE, 0xF2, 0xC0, 0xC8, 0x95, 0xEC, 0x30, 0xB2,
        0x51, 0xC3, 0xE1, 0xA0, 0x9E, 0xE6, 0x9D, 0xCF, 0xFA, 0x7F, 0x14, 0xD1,
        0xCE, 0xB8, 0xDC, 0xC3, 0x4A, 0x67, 0x93, 0xD6, 0x28, 0xC2, 0x91, 0x70,
        0xCA, 0x8D, 0xA2, 0xA4, 0xF0, 0x08, 0x61, 0x90, 0x7E, 0x6F, 0xA2, 0xE0,
        0xEB, 0xAE, 0x3E, 0xB6, 0x67, 0xC7, 0x92, 0xF4, 0x91, 0xB5, 0xF6, 0x6C,
        0x5E, 0x84, 0x40, 0xF7, 0xF3, 0x1B, 0x02, 0x7F, 0xD5, 0xAB, 0x41, 0x89,
        0x28, 0xF4, 0x25, 0xCC, 0x52, 0x11, 0xAD, 0x43, 0x68, 0xA6, 0x41, 0x8B,
        0x84, 0xB5, 0xFF, 0x2C, 0x92, 0x4A, 0x26, 0xD8, 0x47, 0x6A, 0x7C, 0x95,
        0x61, 0xCC, 0xE6, 0xCB, 0xBB, 0x3F, 0x47, 0x58, 0x89, 0x75, 0xC3, 0x75,
        0xA1, 0xD9, 0xAF, 0xCC, 0x08, 0x73, 0x17, 0xDC, 0xAA, 0x9A, 0xA2, 0x16,
        0x41, 0xD8, 0xA2, 0x06, 0xC6, 0x8B, 0xFC, 0x66, 0x34, 0x9F, 0xCF, 0x18,
        0x23, 0xA0, 0x0A, 0x74, 0xE7, 0x2B, 0x27, 0x70, 0x92, 0xE9, 0xAF, 0x37,
        0xE6, 0x8C, 0xA7, 0xBC, 0x62, 0x65, 0x9C, 0xC2, 0x08, 0xC9, 0x88, 0xB3,
        0xF3, 0x43, 0xAC, 0x74, 0x2C, 0x0F, 0xD4, 0xAF, 0xA1, 0xC3, 0x01, 0x64,
        0x95, 0x4E, 0x48, 0x9F, 0xF4, 0x35, 0x78, 0x95, 0x7A, 0x39, 0xD6, 0x6A,
        0xA0, 0x6D, 0x40, 0xE8, 0x4F, 0xA8, 0xEF, 0x11, 0x1D, 0xF3, 0x1B, 0x3F,
        0x3F, 0x07, 0xDD, 0x6F, 0x5B, 0x19, 0x30, 0x19, 0xFB, 0xEF, 0x0E, 0x37,
        0xF0, 0x0E, 0xCD, 0x16, 0x49, 0xFE, 0x53, 0x47, 0x13, 0x1A, 0xBD, 0xA4,
        0xF1, 0x40, 0x19, 0x60, 0x0E, 0xED, 0x68, 0x09, 0x06, 0x5F, 0x4D, 0xCF,
        0x3D, 0x1A, 0xFE, 0x20, 0x77, 0xE4, 0xD9, 0xDA, 0xF9, 0xA4, 0x2B, 0x76,
        0x1C, 0x71, 0xDB, 0x00, 0xBC, 0xFD, 0xC,  0x6C, 0xA5, 0x47, 0xF7, 0xF6,
        0x00, 0x79, 0x4A, 0x11)
# fmt: on


def convert_data(data: bytearray):
    for i in range(len(data)):
        r = i % 0x7FFF
        idx = (r**2 + 80923) % 256
        data[i] ^= MAPS[idx]
    return data


def qmc_file_decrypt(source_root: Path, fname: str, target_root: Path):
    file_path = source_root / fname
    file_prefix = (source_root / fname).stem
    file_suffix = (source_root / fname).suffix[1:]

    if file_suffix not in SUFFIX_MAP:
        save_path = target_root / fname
        shutil.copy(file_path, save_path)
        print(f"{fname} no need to convert, copyed to {target_root}")
        return

    with open(file_path, "rb") as rf:
        data = bytearray(rf.read())
        data = convert_data(data)

        save_path = target_root / f"{file_prefix}.{SUFFIX_MAP[file_suffix]}"
        with open(save_path, "wb") as wf:
            wf.write(data)
        print(f"{fname} -> {file_prefix}.{SUFFIX_MAP[file_suffix]}")


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-s",
        "--source_root",
        type=str,
        default="./qqmusic/",
        help="qqmusic source path, default ./qqmusic/",
    )
    parser.add_argument(
        "-t",
        "--target_root",
        type=str,
        default="./qqmusic_decrypted/",
        help="decrypted file save path, default ./qqmusic_decrypted/",
    )
    parser.add_argument(
        "-w",
        "--workers",
        type=int,
        default=max(os.cpu_count() - 1, 1),
        help="decrypting threads, default max(cpus-1, 1)",
    )

    args = parser.parse_args()
    print("Arguments:")
    for k, v in vars(args).items():
        print(f"{k}:\t{v}")

    return args


def main():
    args = parse_args()
    source_root = Path(args.source_root)
    target_root = Path(args.target_root)
    workers = args.workers

    target_root.mkdir(exist_ok=True)

    file_list = os.listdir(source_root)

    with Pool(workers) as pool:
        print(f"Start converting {len(file_list)} qqmusic files!\n")
        for fname in file_list:
            pool.apply_async(qmc_file_decrypt, args=(source_root, fname, target_root))

        pool.close()
        pool.join()

        print(f"All {len(file_list)} qqmusic files converted!")


if __name__ == "__main__":
    main()
